package org.example;

import org.example.dao.UserDAO;
import org.example.dao.UserDAOImpl;
import org.example.model.User;
import org.example.service.UserService;
import org.example.service.UserServiceImpl;

import java.util.Comparator;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;


public class Main {
    public static void main(String[] args) {
        UserService userService = new UserServiceImpl(new UserDAOImpl());
        Scanner scanner = new Scanner(System.in);
        //testSergeyR
        while (true) {
            System.out.println("\n1. –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            System.out.println("2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
            System.out.println("3. –ù–∞–π—Ç–∏ –ø–æ ID");
            System.out.println("4. –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            System.out.println("5. –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            System.out.println("0. –í—ã—Ö–æ–¥");

            int choice = readInt(scanner, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ");

            switch (choice) {
                case 1 -> {
                    String name = readString(scanner, "–ò–º—è: ");
                    String email = readEmail(scanner, "Email: ");
                    int age = readInt(scanner, "–í–æ–∑—Ä–∞—Å—Ç: ");

                    User user = new User();
                    user.setName(name);
                    user.setEmail(email);
                    user.setAge(age);

                    try {
                        userService.create(user);
                        System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω.");
                    } catch (Exception e) {
                        System.out.println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: " + e.getMessage());
                    }
                }

                case 2 -> {
                    List<User> users = userService.getAll();
                    users.sort(Comparator.comparing(User::getId));
                    if (users.isEmpty()) {
                        System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.");
                    } else {
                        users.forEach(System.out::println);
                    }
                }

                case 3 -> {
                    int id = readInt(scanner, "ID: ");
                    User user = userService.getById(id);
                    if (user != null) {
                        System.out.println(user);
                    } else {
                        System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                    }
                }

                case 4 -> {
                    int id = readInt(scanner, "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ");
                    User user = userService.getById(id);
                    if (user != null) {
                        String name = readString(scanner, "–ù–æ–≤–æ–µ –∏–º—è: ");
                        String email = readString(scanner, "–ù–æ–≤—ã–π email: ");
                        int age = readInt(scanner, "–ù–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç: ");

                        user.setName(name);
                        user.setEmail(email);
                        user.setAge(age);

                        userService.update(user);
                        System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω.");
                    } else {
                        System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                    }
                }

                case 5 -> {
                    int id = readInt(scanner, "ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
                    userService.delete(id);
                    System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.");
                }

                case 0 -> {
                    System.out.println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è üëã");
                    return;
                }

                default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ int
    private static int readInt(Scanner scanner, String prompt) {
        int value;
        while (true) {
            System.out.print(prompt);
            try {
                value = scanner.nextInt();
                scanner.nextLine(); // –æ—á–∏—Å—Ç–∫–∞ \n
                return value;
            } catch (InputMismatchException e) {
                System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!");
                scanner.nextLine(); // –æ—á–∏—Å—Ç–∫–∞ –≤–≤–æ–¥–∞
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏
    private static String readString(Scanner scanner, String prompt) {
        System.out.print(prompt);
        return scanner.nextLine().trim();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    private static String readEmail(Scanner scanner, String prompt) {
        String emailRegex = "^[a-zA-Z\\d._%+-]+@[a-zA-Z]+\\.[a-zA-Z]{2,3}$"; // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è email
        while (true) {
            System.out.print(prompt);
            String email = scanner.nextLine().trim();
            if (email.matches(emailRegex)) {
                return email;
            } else {
                System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }
    }
}